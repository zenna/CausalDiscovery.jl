package str;

struct Str{

  int n;
  char[n] buf;
}


Str newStr([int n], char [n] w){
  return new Str(n=n, buf=w);
}


@Native("{ printf(\"%s \n \", s->buf); }")
void println(Str s){
	if(s.n>0){
  		assert s.buf[s.n-1]=='\0';
	}	
}




Str cat(Str s1, Str s2){
    
  Str sr = new Str(n=s1.n + s2.n);
    
  int last;
    
  generator void copyFrom(int q, Str s){
        
	for(int i=q; i<sr.n; ++i){            
            
		if(i-q >= s.n || s.buf[i-q] == '\0'){
                
			last = i;
                
			return;
            
		}
            
	sr.buf[i] = s.buf[i-q];
        
	}
    
  }
    
  copyFrom(0, s1);
    
  copyFrom(last, s2);
    
  if(last < sr.n){
        	
	sr.buf[last] = '\0';
    
  }
    
  return sr;

}




@NeedsInclude("#include <sstream>")
@Native("{ _out = new Str(n*10,NULL, 0); stringstream st; for(int i=0; i<n; ++i){ st<<ar[i]<<\",\";} const char* cc = st.str().c_str(); int i=0; while(cc[i]!='\0'){ _out->s[i]=cc[i++]; }  }")
Str intArrToStr(int n, int[n] ar){
    
  Str s = new Str(n=n*10);
    
  return s;

}



int cmp(Str s1, Str s2){
	int i = 0;
	bit goon = 1;
	while(goon)
	{		
		if(i>=s1.n || i >= s2.n){
			goon = 0;
			return 0;
		}
		if(s1.buf[i] != s2.buf[i]){
			goon = 0;
			return s1.buf[i]-s2.buf[i];
		}
		if(s1.buf[i] == '\0' && s2.buf[i] == '\0'){
			goon = 0;
			return 0;
		}
		i++;
	}
	
}



@Native("{printf(\"%s\", s->buf);}")
void print(Str s){}


@NeedsInclude("#include \"readStr.h\"")
@Native("{ _out = _readStr();}")
Str readStr(){
  return new Str(n=6, buf="hello");
}
